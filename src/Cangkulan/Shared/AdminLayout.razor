@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavMgr
@inject UserProfileService Userservice
@inject CompanyService CompanySvc
@inject IJSRuntime IJS
@inject AppState AppState

<PageTitle>Cangkulan App</PageTitle>

<CascadingValue Value="this">
<!-- Wrapper -->
<div id="wrapper">

    <!-- Header Container
    ================================================== -->
    <header id="header-container" class="fullwidth dashboard-header not-sticky">

        <!-- Header -->
        <div id="header">
            <div class="container">

                <!-- Left Side Content -->
                <div class="left-side">

                    <!-- Logo -->
                    <div id="logo">
                        <a href="index"><img src="images/logo.png" alt=""></a>
                    </div>

                    <!-- Main Navigation -->
                    <HeaderNav></HeaderNav>
                    <div class="clearfix"></div>
                    <!-- Main Navigation / End -->

                </div>
                <!-- Left Side Content / End -->
                <!-- Right Side Content / End -->
                    <HamburgerMenu></HamburgerMenu>
                <!-- Right Side Content / End -->

            </div>
        </div>
        <!-- Header / End -->

    </header>
    <div class="clearfix"></div>
    <!-- Header Container / End -->
    <!-- Dashboard Container -->
    <div class="dashboard-container">

        <!-- Dashboard Sidebar
        ================================================== -->
        <SideBarPage></SideBarPage>
        <!-- Dashboard Sidebar / End -->
        <!-- Dashboard Content
        ================================================== -->
        <div class="dashboard-content-container" data-simplebar>


            
                <!-- Main Content -->
                @Body
           

            <!-- Footer / End -->

        </div>
        <!-- Dashboard Content / End -->

    </div>
    <!-- Dashboard Container / End -->


</div>
<!-- Wrapper / End -->
<ConfirmDialog OnClick="@Delete" />
<CompanyDetail @ref="detail" TaskObject=@CompanyItem DataChanged="@CompanyDataChanged">
    <CustomHeader>@CompanyDetailHeader</CustomHeader>
</CompanyDetail>
<JobPopupPage></JobPopupPage>

<ReviewPopupPage></ReviewPopupPage>
<ReviewFreelancePopupPage></ReviewFreelancePopupPage>
<DirectMessagePopupPage></DirectMessagePopupPage>
<BidAccPopupPage></BidAccPopupPage>
<EditBidPopupPage></EditBidPopupPage>
<PickLocation @ref="loc" DataChanged="@RefreshLocation">
    <CustomHeader>Pilih Lokasi</CustomHeader>
</PickLocation>
</CascadingValue>
<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />

@code {
    public PickLocation loc { get; set; }
    string SelectDelete;
    CompanyDetail detail;
    string CompanyDetailHeader = "Company Detail";

    [Parameter]
    public Company CompanyItem { get; set; } = new();

    public Company DeleteCompanyItem { get; set; }

    [Parameter]
    public bool IsTransparent { get; set; } = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public void SetLocation(string Alamat)
    {
        loc.Address = Alamat;
        StateHasChanged();
    }
    private async void RefreshLocation()
    {
        var newLoc = new GeoLocation();
        newLoc = loc.SelectedLocation;
        AppState.SelectLocation(UserName, newLoc);

    }

    async Task Keluar()
    {
        NavMgr.NavigateTo($"/logout", true);
        //await localStorage.SetItemAsync(AppConstants.NameKey, "");
        //NavMgr.NavigateTo($"/login");
    }
    public void InitCompany()
    {

        CompanyItem = new Company();


        CompanyDetailHeader = "Masukan Company Baru";
    }
    public async void CompanyDataChanged()
    {
        AppState.RefreshCompany(UserName);
        //StateHasChanged();
    }

    public void EditCompany(Company item)
    {
        CompanyDetailHeader = "Ubah Data Company";
        CompanyItem = item;
        StateHasChanged();
        //detail.DocumentUrl = item.DocumentUrl;
    }

    public void PrepareDeleteCompany(Company item)
    {
        SelectDelete = "Company";
        DeleteCompanyItem = item;
        StateHasChanged();
    }

    private async Task Delete()
    {
        switch (SelectDelete)
        {
            case "Company":
                if (DeleteCompanyItem != null)
                    await DeleteCompany();

                break;
            default:
                break;
        }
    }

    private async Task DeleteCompany()
    {
        var task = CompanySvc.DeleteData(DeleteCompanyItem.Id);
        await IJS.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        //await LoadData();
        DeleteCompanyItem = null;
        AppState.RefreshCompany(UserName);
    }

    string Nama = "Saya";
    string UserName;
    protected override async Task OnInitializedAsync()
    {


        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            Nama = Userservice.GetUserByEmail(UserName)?.FullName;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            IJS.InvokeVoidAsync("InitJs");
        }
    }
}