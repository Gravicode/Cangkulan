@page "/manage-job"
@layout AdminLayout
@inject IJSRuntime IJS

@inject NavigationManager NavMgr
@inject IToastService toastService
@inject JobService JobSvc
@inject UserProfileService service
@inject CompanyService CompanySvc
@inject JobCategoryService CategorySvc
@inject AzureBlobHelper AzureBlobHelper
@inject AppState AppState
@implements IDisposable
<div class="dashboard-content-inner">

    <!-- Dashboard Headline -->
    <div class="dashboard-headline">
        <h3>Manage Jobs</h3>

        <!-- Breadcrumbs -->
        <nav id="breadcrumbs" class="dark">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="#">Dashboard</a></li>
                <li>Manage Jobs</li>
            </ul>
        </nav>
    </div>

    <!-- Row -->
    <div class="row">

        <!-- Dashboard Box -->
        <div class="col-xl-12">
            <div class="dashboard-box margin-top-0">

                <!-- Headline -->
                <div class="headline">
                    <h3><i class="icon-material-outline-business-center"></i> My Job Listings</h3>
                </div>

                <div class="content">
                    <ul class="dashboard-box-list">
                        <Virtualize Items="@ListJob" Context="item">

                            <li @key="item.Id">
                                <!-- Job Listing -->
                                <div class="job-listing">

                                    <!-- Job Listing Details -->
                                    <div class="job-listing-details">

                                        <!-- Logo -->
                                        <!-- 											<a href="#" class="job-listing-company-logo">
                                                                                        <img src="images/company-logo-05.png" alt="">
                                                                                    </a> -->
                                        <!-- Details -->
                                        <div class="job-listing-description">
                                            <h3 class="job-listing-title"><a href="@($"/job-detail/{item.Id}")">@item.JobTitle</a> <span class="dashboard-status-button @GetStatusClass(item.Status)">@item.Status</span></h3>

                                            <!-- Job Listing Footer -->
                                            <div class="job-listing-footer">
                                                <ul>
                                                    <li><i class="icon-material-outline-date-range"></i> Posted on @item.CreatedDate.ToString("dd MMMM, yyyy")</li>
                                                    <li><i class="icon-material-outline-date-range"></i> Expiring on @item.ExpiryDate?.ToString("dd MMMM, yyyy")</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Buttons -->
                                <div class="buttons-to-right always-visible">
                                    <a href="@($"/manage-candidate/{item.Id}")" class="button ripple-effect"><i class="icon-material-outline-supervisor-account"></i> Manage Candidates <span class="button-info">@(item.JobCandidates==null ? 0 : item.JobCandidates.Count)</span></a>
                                    <a href="#" @onclick:preventDefault @onclick='()=>Open($"/post-job/{item.Id}")' class="button gray ripple-effect ico" title="Edit" data-tippy-placement="top"><i class="icon-feather-edit"></i></a>
                                    <a href="#" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" class="button gray ripple-effect ico" title="Remove" data-tippy-placement="top"><i class="icon-feather-trash-2"></i></a>
                                </div>
                            </li>


                        </Virtualize>

                    </ul>
                </div>
            </div>
        </div>

    </div>
    <!-- Row / End -->
    <!-- Footer -->
    <div class="dashboard-footer-spacer"></div>
    <SmallFooterPage></SmallFooterPage>
    <!-- Footer / End -->

</div>
@code {
    List<Job> ListJob = new();
    UserProfile SelUser = new UserProfile();
    Job DataJob = new();
    string ErrorMsg = string.Empty;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    [CascadingParameter]
    public AdminLayout Layout { get; set; }

    private void PrepareForDelete(Job item)
    {
        DataJob = item;
        Layout.PrepareDeleteJob(item);
    }
    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = service.GetItemByUsername(UserName);
            DataJob.EmployerId = SelUser.Id;
            await LoadData();
        }
        AppState.OnJobChange += RefreshJob;


    }

    async Task LoadData()
    {
        ListJob = JobSvc.GetAllData(SelUser);
    }
    public void Dispose()
    {
        AppState.OnJobChange -= RefreshJob;

    }
    async void RefreshJob(string tousername)
    {
        await LoadData();
        await InvokeAsync(StateHasChanged);
    }
    string GetStatusClass(string State)
    {
        switch (State)
        {
            default:
            case JobStatus.Active:
                return "green";
                break;
            case JobStatus.NonActive:
                return "yellow";
                break;
            case JobStatus.Expire:
                return "red";
                break;
        }
    }

    async Task Open(string url)
    {
        if (!string.IsNullOrEmpty(url))
            await IJS.InvokeVoidAsync("OpenUrl", url);
    }
    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            //IJS.InvokeVoidAsync("InitJs");
        }
    }
}
