@page "/manage-candidate"
@page "/manage-candidate/{JobId:long}"
@layout AdminLayout
@inject IJSRuntime IJS
@inject JobService JobSvc
@inject UserProfileService UserSvc
@inject JobCandidateService JobCandidateSvc
@inject ToastInfoService Toast
@inject AppState AppState
@implements IDisposable
<div class="dashboard-content-inner">

    <!-- Dashboard Headline -->
    <div class="dashboard-headline">
        <h3>Manage Candidates</h3>
        <span class="margin-top-7">Daftar pelamar untuk posisi: <a href="#">@DataJob.JobTitle</a></span>

        <!-- Breadcrumbs -->
        <nav id="breadcrumbs" class="dark">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="#">Dashboard</a></li>
                <li>Manage Candidates</li>
            </ul>
        </nav>
    </div>

    <!-- Row -->
    <div class="row">

        <!-- Dashboard Box -->
        <div class="col-xl-12">
            <div class="dashboard-box margin-top-0">

                <!-- Headline -->
                <div class="headline">
                    <h3><i class="icon-material-outline-supervisor-account"></i> @(DataJob.JobCandidates != null ? DataJob.JobCandidates.Count().ToString("n0") : 0) Candidates</h3>
                </div>

                <div class="content">
                    <ul class="dashboard-box-list">
                        @if (DataJob.JobCandidates != null)
                            @foreach (var item in DataJob.JobCandidates)
                            {
                                <li>
                                    <!-- Overview -->
                                    <div class="freelancer-overview manage-candidates">
                                        <div class="freelancer-overview-inner">

                                            <!-- Avatar -->
                                            <div class="freelancer-avatar">
                                                <div class="verified-badge"></div>
                                                <a href="#"><img src="@(string.IsNullOrEmpty(item.Candidate.PicUrl)?"images/user-avatar-big-03.jpg":item.Candidate.PicUrl)" alt=""></a>
                                            </div>

                                            <!-- Name -->
                                            <div class="freelancer-name">
                                                <h4><a href="@($"freelance-detail/{item.Candidate.Id}")">@item.Candidate.FullName <img class="flag" src="@(string.IsNullOrEmpty(item.Candidate.Nationality)?"images/flags/id.svg": $"images/flags/{item.Candidate.Nationality}.svg")" alt="" title="@item.Candidate.Nationality" data-tippy-placement="top"></a></h4>

                                                <!-- Details -->
                                                <span class="freelancer-detail-item"><a href="#"><i class="icon-feather-mail"></i> @item.Candidate.Email</a></span>
                                                <span class="freelancer-detail-item"><i class="icon-feather-phone"></i> @item.Candidate.Phone</span>

                                                <!-- Rating -->
                                                @if (item.Candidate.ReviewByEmployers != null && item.Candidate.ReviewByEmployers.Count >= 3)
                                                {
                                                    <div class="freelancer-rating">
                                                        <div class="star-rating" data-rating="@item.Candidate.Rating"></div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <br>
                                                    <span class="company-not-rated">Minimum of 3 votes required</span>
                                                }
                                             

                                                <!-- Buttons -->
                                                <div class="buttons-to-right always-visible margin-top-25 margin-bottom-5">
                                                    <a href="@item.CVUrl" target="_blank" class="button ripple-effect"><i class="icon-feather-file-text"></i> Download CV</a>
                                                    <a href="#small-dialog" class="popup-with-zoom-anim button dark ripple-effect"><i class="icon-feather-mail"></i> Send Message</a>
                                                    <a href="#" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" class="button gray ripple-effect ico" title="Remove Candidate" data-tippy-placement="top"><i class="icon-feather-trash-2"></i></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            }


                    </ul>
                </div>
            </div>
        </div>

    </div>
    <!-- Row / End -->
    <!-- Footer -->
    <div class="dashboard-footer-spacer"></div>
    <SmallFooterPage></SmallFooterPage>
    <!-- Footer / End -->

</div>
@code {
    [Parameter]
    public long JobId { get; set; } = -1;
    UserProfile SelUser = new UserProfile();
    Job DataJob = new();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    [CascadingParameter]
    public AdminLayout Layout { get; set; }

    private void PrepareForDelete(JobCandidate item)
    {
        
        Layout.PrepareDeleteJobCandidate(item);
    }
    public void Dispose()
    {
        AppState.OnJobCandidateChange -= RefreshJobCandidate;

    }
    async void RefreshJobCandidate(string tousername)
    {
        LoadData();
        await InvokeAsync(StateHasChanged);
    }
    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsername(UserName);

        }
        LoadData();
        AppState.OnJobCandidateChange += RefreshJobCandidate;
    }

    void LoadData()
    {
        if (JobId > 0)
            DataJob = JobSvc.GetDataById(JobId);
    }

    
    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            //IJS.InvokeVoidAsync("InitJs");
        }
    }
}
