@page "/my-active-bid"
@layout AdminLayout
@inject IJSRuntime IJS
@inject ProjectBidderService ProjectBidderSvc
@inject NavigationManager NavMgr
@inject ToastInfoService Toast
@inject ProjectService ProjectSvc
@inject UserProfileService service
@inject AppState AppState
@implements IDisposable
<div class="dashboard-content-inner">

	<!-- Dashboard Headline -->
	<div class="dashboard-headline">
		<h3>Daftar Penawaran Saya</h3>

		<!-- Breadcrumbs -->
		<nav id="breadcrumbs" class="dark">
			<ul>
				<li><a href="/">Home</a></li>
				<li><a href="#">Dashboard</a></li>
				<li>Daftar Penawaran Saya</li>
			</ul>
		</nav>
	</div>

	<!-- Row -->
	<div class="row">

		<!-- Dashboard Box -->
		<div class="col-xl-12">
			<div class="dashboard-box margin-top-0">

				<!-- Headline -->
				<div class="headline">
					<h3><i class="icon-material-outline-gavel"></i> Daftar Penawaran</h3>
				</div>

				<div class="content">
					<ul class="dashboard-box-list">
						<Virtualize Items="@ListProjectBidder" Context="item">
							
						<li @key="item.Id">
							<!-- Job Listing -->
							<div class="job-listing width-adjustment">

								<!-- Job Listing Details -->
								<div class="job-listing-details">

									<!-- Details -->
									<div class="job-listing-description">
										<h3 class="job-listing-title"><a href="@($"/project-detail/{item.Project.Id}")">@item.Project.ProjectName</a></h3>
									</div>
								</div>
							</div>

							<!-- Task Details -->
							<ul class="dashboard-task-info">
									<li><strong>Rp @item.OfferingPrice.ToString("n0")</strong><span>@(item.Project.ProjectPaymentType == ProjectPaymentTypes.Hourly ? "Hourly Rate" : "Fixed Price")</span></li>
								<li><strong>@(item.DeliveryTime.Days>0? item.DeliveryTime.Days + " hari": item.DeliveryTime.Hours + " jam")</strong><span>Delivery Time</span></li>
							</ul>
								@if (!item.Project.WinnerId.HasValue)
								{
									<!-- Buttons -->
									<div class="buttons-to-right always-visible">
										<a href="#small-dialog" @onclick:preventDefault @onclick="()=>EditBid(item)" class="popup-with-zoom-anim button dark ripple-effect ico" title="Edit Bid" data-tippy-placement="top"><i class="icon-feather-edit"></i></a>
										<a href="#" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" class="button red ripple-effect ico" title="Cancel Bid" data-tippy-placement="top"><i class="icon-feather-trash-2"></i></a>
									</div>
								}
							</li>
				
						</Virtualize>
					</ul>
				</div>
			</div>
		</div>

	</div>
	<!-- Row / End -->
	<!-- Footer -->
	<div class="dashboard-footer-spacer"></div>
	<SmallFooterPage></SmallFooterPage>
	<!-- Footer / End -->

</div>
@code {
	List<ProjectBidder> ListProjectBidder = new();
	UserProfile SelUser = new UserProfile();

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	string UserName;

	[CascadingParameter]
	public AdminLayout Layout { get; set; }

	private void PrepareForDelete(ProjectBidder item)
	{
		Layout.PrepareDeleteProjectBidder(item);
	}
	protected override async Task OnInitializedAsync()
	{

		var user = (await authenticationStateTask).User;

		if (user.Identity.IsAuthenticated)
		{
			UserName = user.Identity.Name;
			SelUser = service.GetItemByUsername(UserName);
			await LoadData();
		}
		AppState.OnProjectBidderChange += RefreshProjectBidder;


	}
	async Task EditBid(ProjectBidder item)
	{
		Layout.EditBid(item);
		await IJS.InvokeVoidAsync("ShowModal", "editbid-small-dialog");
		//await IJS.InvokeVoidAsync("ReBindingSlider");
	}
	async Task LoadData()
	{

		ListProjectBidder = ProjectBidderSvc.GetAllData(SelUser.Id);
	}
	public void Dispose()
	{
		AppState.OnProjectBidderChange -= RefreshProjectBidder;

	}
	async void RefreshProjectBidder(string tousername)
	{
		await LoadData();
		await InvokeAsync(StateHasChanged);
	}
	
	protected override void OnAfterRender(bool firstRender)
	{

		if (firstRender)
		{
			//IJS.InvokeVoidAsync("InitJs");
		}
	}
}
