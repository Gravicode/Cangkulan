@inject UserProfileService UserSvc
@inject NotificationService NotificationSvc
@inject MessageHeaderService MessageSvc
@inject ToastInfoService Toast

<div class="right-side">

    <!--  User Notifications -->
    <div class="header-widget hide-on-mobile">

        <!-- Notifications -->
        <div class="header-notifications">

            <!-- Trigger -->
            <div class="header-notifications-trigger">
                <a href="#"><i class="icon-feather-bell"></i><span>@ListNotification.Count</span></a>
            </div>

            <!-- Dropdown -->
            <div class="header-notifications-dropdown">

                <div class="header-notifications-headline">
                    <h4>Notifikasi</h4>
                    <button @onclick="MarkReadNotification" class="mark-as-read ripple-effect-dark" title="Bersihkan Semua" data-tippy-placement="left">
                        <i class="icon-feather-check-square"></i>
                    </button>
                </div>

                <div class="header-notifications-content">
                    <div class="header-notifications-scroll" data-simplebar>
                        <ul>
                            @if (ListNotification == null || ListNotification.Count <= 0)
                            {
                                <!-- Notification -->
                                <li class="notifications-not-read">
                                    <span class="notification-text">
                                        <span class="color">Tidak ada notifikasi</span>
                                    </span>
                                </li>
                            }
                            else
                            {
                                @foreach (var item in ListNotification)
                                {
                                    <!-- Notification -->
                                    <li class="notifications-not-read">
                                        <a href="@item.LinkUrl">
                                            <span class="notification-icon"><i class="icon-material-outline-group"></i></span>
                                            <span class="notification-text">
                                                <strong>@item.Action</strong>: <span class="color">@item.Message</span>
                                            </span>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>

            </div>

        </div>

        <!-- Messages -->
        <div class="header-notifications">
            <div class="header-notifications-trigger">
                <a href="#"><i class="icon-feather-mail"></i><span>@ListMessage.Count</span></a>
            </div>

            <!-- Dropdown -->
            <div class="header-notifications-dropdown">

                <div class="header-notifications-headline">
                    <h4>Pesan</h4>
                    <button @onclick="MarkReadInbox" class="mark-as-read ripple-effect-dark" title="Bersihkan Semua" data-tippy-placement="left">
                        <i class="icon-feather-check-square"></i>
                    </button>
                </div>

                <div class="header-notifications-content">
                    <div class="header-notifications-scroll" data-simplebar>
                        <ul>
                            @if (ListMessage == null || ListMessage.Count <= 0)
                            {
                                <!-- Notification -->
                                <li class="notifications-not-read">
                                    <div class="notification-text">

                                        <p class="notification-msg-text">Pesan Kosong...</p>
                                        <span class="color">-</span>
                                    </div>

                                </li>
                            }
                            else
                            {
                                @foreach (var item in ListMessage)
                                {

                                    <!-- Notification -->
                                    <li class="notifications-not-read">
                                        <a href="@($"/Chat/{Uri.EscapeDataString(item.FromUser.Username)}")">
                                            <span class="notification-avatar status-online"><img src="@(string.IsNullOrEmpty(item.User.PicUrl)?"images/user-avatar-small-03.jpg":item.User.PicUrl)" alt=""></span>
                                            <div class="notification-text">
                                                <strong>@item.User.FullName</strong>
                                                <p class="notification-msg-text">@(item.LastMessage.Length > 50 ? item.LastMessage.Substring(0, 50) : item.LastMessage)</p>
                                                <span class="color">@TimeHelpers.TimeAgo(item.LastUpdate)</span>
                                            </div>
                                        </a>
                                    </li>
                                }
                            }

                        </ul>
                    </div>
                </div>

                <a href="/list-message" class="header-notifications-button ripple-effect button-sliding-icon">Lihat Pesan<i class="icon-material-outline-arrow-right-alt"></i></a>
            </div>
        </div>

    </div>
    <!--  User Notifications / End -->
    <!-- User Menu -->
    <div class="header-widget">

        <!-- Messages -->
        <div class="header-notifications user-menu">
            <AuthorizeView>
                <Authorized>
                    <div class="header-notifications-trigger">
                        <a href="#"><div class="user-avatar @(selUser.IsOnline?"status-online":"status-offline")"><img src="@(string.IsNullOrEmpty(selUser.PicUrl)?"images/user-avatar-small-01.jpg" : selUser.PicUrl )" alt=""></div></a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="header-notifications-trigger">
                        <a href="#"><div class="user-avatar status-online"><img src="images/user-avatar-small-01.jpg" alt=""></div></a>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            <!-- Dropdown -->
            <div class="header-notifications-dropdown">
                <AuthorizeView>
                    <Authorized>
                        <!-- User Status -->
                        <div class="user-status">

                            <!-- User Name / Avatar -->
                            <div class="user-details">
                                <div class="user-avatar @(selUser.IsOnline?"status-online":"status-offline")"><img src="@(string.IsNullOrEmpty(selUser.PicUrl)?"images/user-avatar-small-01.jpg" : selUser.PicUrl )" alt=""></div>
                                <div class="user-name">
                                    @selUser.FullName <span>@selUser.TagLine</span>
                                </div>
                            </div>

                            <!-- User Status Switcher -->
                            <div class="status-switch" id="snackbar-user-status">
                                <label @onclick="()=>SetStatus(true)" class="user-online @(selUser.IsOnline ? "current-status":"")">Online</label>
                                <label @onclick="()=>SetStatus(false)" class="user-invisible @(!selUser.IsOnline ? "current-status":"")">Invisible</label>
                                <!-- Status Indicator -->
                                <span class="status-indicator" aria-hidden="true"></span>
                            </div>
                        </div>
                        <ul class="user-menu-small-nav">
                            <li><a href="dashboard"><i class="icon-material-outline-dashboard"></i> Dashboard</a></li>
                            <li><a href="settings"><i class="icon-material-outline-settings"></i> Settings</a></li>
                            <li><a href="/logout"><i class="icon-material-outline-power-settings-new"></i> Logout</a></li>
                        </ul>
                    </Authorized>
                    <NotAuthorized>
                        <ul class="user-menu-small-nav">
                            <li><a href="/sign-in"><i class="icon-material-outline-power-settings-new"></i> Login</a></li>
                        </ul>
                    </NotAuthorized>
                </AuthorizeView>


            </div>
        </div>

    </div>
    <!-- User Menu / End -->
    <!-- Mobile Navigation Button -->
    <span class="mmenu-trigger">
        <button class="hamburger hamburger--collapse" type="button">
            <span class="hamburger-box">
                <span class="hamburger-inner"></span>
            </span>
        </button>
    </span>

</div>
@code {
    public List<Notification> ListNotification { get; set; } = new();
    public List<MessageHeader> ListMessage { get; set; } = new();
    UserProfile selUser;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            selUser = UserSvc.GetItemByUsername(UserName);

        }
    }

    void LoadData()
    {
        ListNotification = NotificationSvc.GetLatestNotifications(selUser.Id);
        ListMessage = MessageSvc.GetLatestMessage(selUser.Id);
    }

    async Task SetStatus(bool Online)
    {
        selUser.IsOnline = Online;
        var res = UserSvc.UpdateData(selUser);
    }

    async Task MarkReadInbox()
    {
        foreach(var item in ListMessage)
        {
            item.IsRead = true;
            MessageSvc.UpdateData(item);
        }
        if (ListMessage.Count > 0)
        {
            await Toast.ShowInfo("pesan dibaca semua");
            LoadData();
        }
    }
    async Task MarkReadNotification()
    {
        foreach(var item in ListNotification)
        {
            item.IsRead = true;
            NotificationSvc.UpdateData(item);
        }
        if (ListNotification.Count > 0){
            LoadData();
            await Toast.ShowInfo("notifikasi dibersihkan");
        }
    }
}
