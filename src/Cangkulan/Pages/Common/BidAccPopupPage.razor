@inject ProjectService ProjectSvc
@inject ToastInfoService Toast
@inject NotificationService NotificationSvc
@inject AppState AppState
@inject IJSRuntime IJS
<!-- Bid Acceptance Popup
================================================== -->
<div id="bidacc-small-dialog" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document" style="background-color:white;">

        <!--Tabs -->
        <div class="sign-in-form">

            <ul class="popup-tabs-nav">
                <li><a href="#tab1">Accept Offer</a></li>
            </ul>

            <div class="popup-tabs-container">

                <!-- Tab -->
                <div class="popup-tab-content" id="tab">

                    <!-- Welcome Text -->
                    <div class="welcome-text">
                        <h3>Accept Offer From @NewBid.UserBidder?.FullName</h3>
                        <div class="bid-acceptance margin-top-15">
                            Rp @NewBid.OfferingPrice.ToString("n0")
                        </div>

                    </div>

                    <form id="terms">
                        <div class="radio">
                            <input id="radio-1" name="radio" type="radio" required>
                            <label for="radio-1"><span class="radio-label"></span>  I have read and agree to the Terms and Conditions</label>
                        </div>
                    </form>

                    <!-- Button -->
                    <button class="margin-top-15 button full-width button-sliding-icon ripple-effect" @onclick="Submit" type="button" form="terms">Accept <i class="icon-material-outline-arrow-right-alt"></i></button>

                </div>

            </div>
        </div>
    </div>
</div>
<!-- Bid Acceptance Popup / End -->
@code {
    public bool Agree { get; set; }
    [Parameter]
    public ProjectBidder NewBid { get; set; } = new();
    [Parameter]
    public Project DataProject { get; set; } = new();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }

    }
    public void SetBidder(Project ProjectItem, ProjectBidder UserBidder)
    {
        this.DataProject = ProjectItem;
        this.NewBid = UserBidder;
        StateHasChanged();
    }

    async Task Submit()
    {
        //if (Agree)
        {
            DataProject.WinnerId = NewBid.UserBidderId;
            var res = ProjectSvc.UpdateData(DataProject);
            if (res)
            {
                foreach(var peserta in DataProject.ProjectBidders)
                {
                    var notif = new Notification() { Action = "Pemenang Proyek Terpilih", Message = $"{NewBid.UserBidder.FullName} adalah pemenang dari proyek {DataProject.ProjectName}", CreatedDate = DateHelper.GetLocalTimeNow(), IsRead = false, LinkDesc = "", LinkUrl = "#", UserId = peserta.UserBidderId };
                    res = NotificationSvc.InsertData(notif);
                }
                await Toast.ShowInfo($"Pemenang sudah dipilih: {NewBid.UserBidder.FullName}");
                AppState.RefreshProjectBidder(UserName);
                await IJS.InvokeVoidAsync("CloseModal", "bidacc-small-dialog");
            }
            else
            {
                await Toast.ShowInfo($"Gagal memilih pemenang, problem system.");

            }
        }
    }
}
