@page "/list-review"
@layout AdminLayout
@inject IJSRuntime IJS
@inject ReviewService ReviewSvc
@inject UserProfileService UserSvc

@inject NavigationManager NavMgr
@inject ToastInfoService Toast
@inject AppState AppState
@implements IDisposable
<div class="dashboard-content-inner">

	<!-- Dashboard Headline -->
	<div class="dashboard-headline">
		<h3>Reviews</h3>

		<!-- Breadcrumbs -->
		<nav id="breadcrumbs" class="dark">
			<ul>
				<li><a href="#">Home</a></li>
				<li><a href="#">Dashboard</a></li>
				<li>Reviews</li>
			</ul>
		</nav>
	</div>

	<!-- Row -->
	<div class="row">

		<!-- Dashboard Box -->
		<div class="col-xl-6">
			<div class="dashboard-box margin-top-0">

				<!-- Headline -->
				<div class="headline">
					<h3><i class="icon-material-outline-business"></i> Review Pemberi Kerja</h3>
				</div>

				<div class="content">
					<ul class="dashboard-box-list">
						
						@foreach(var item in ListEmployer){
							if (item.Id <= 0)
							{
								<li>
									<div class="boxed-list-item">
										<!-- Content -->
										<div class="item-content">
											<h4>@item.Project.ProjectName</h4>
											<span class="company-not-rated margin-bottom-5">Not Rated</span>
										</div>
									</div>

									<a href="#" @onclick:preventDefault @onclick="()=>SelectReview(item)" class="button ripple-effect margin-top-5 margin-bottom-10"><i class="icon-material-outline-thumb-up"></i> Kasih Review</a>
								</li>
							}
							else
							{
								<li>
									<div class="boxed-list-item">
										<!-- Content -->
										<div class="item-content">
											<h4>@item.Project.ProjectName</h4>
											<div class="item-details margin-top-10">
												<RatingPicker Rating="item.Rating" IsEditable="false"></RatingPicker>
											
												<div class="detail-item"><i class="icon-material-outline-date-range"></i> @item.CreatedDate.ToString("dd MMM yyyy")</div>
											</div>
											<div class="item-description">
												<p>@item.Message</p>
											</div>
										</div>
									</div>
									<a href="#" @onclick:preventDefault @onclick="()=>SelectReview(item)" class="button gray ripple-effect margin-top-5 margin-bottom-10"><i class="icon-feather-edit"></i> Ubah Review</a>
								</li>
							}
						}

					</ul>
				</div>
			</div>

			<!-- Pagination -->
			<div class="clearfix"></div>
			<div style="display:none;" class="pagination-container margin-top-40 margin-bottom-0">
				<nav class="pagination">
					<ul>
						<li><a href="#" class="ripple-effect current-page">1</a></li>
						<li><a href="#" class="ripple-effect">2</a></li>
						<li><a href="#" class="ripple-effect">3</a></li>
						<li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-right"></i></a></li>
					</ul>
				</nav>
			</div>
			<div class="clearfix"></div>
			<!-- Pagination / End -->

		</div>

		<!-- Dashboard Box -->
		<div class="col-xl-6">
			<div class="dashboard-box margin-top-0">

				<!-- Headline -->
				<div class="headline">
					<h3><i class="icon-material-outline-face"></i> Review Freelancer</h3>
				</div>

				<div class="content">
					<ul class="dashboard-box-list">
						@foreach(var item in ListFreelancer){
							if (item.Id <= 0)
							{
								<li>
									<div class="boxed-list-item">
										<!-- Content -->
										<div class="item-content">
											<h4>@item.Project.ProjectName</h4>
											<span class="company-not-rated margin-bottom-5">Not Rated</span>
										</div>
									</div>

									<a href="#" @onclick:preventDefault @onclick="()=>SelectReview(item)" class="button ripple-effect margin-top-5 margin-bottom-10"><i class="icon-material-outline-thumb-up"></i> Kasih Review</a>
								</li>
							}
							else
							{
								<li>
									<div class="boxed-list-item">
								<!-- Content -->
								<div class="item-content">
									<h4>@item.Project.ProjectName</h4>
									<div class="item-details margin-top-10">
										
										<RatingPicker Rating="item.Rating" IsEditable="false"></RatingPicker>
										<div class="detail-item"><i class="icon-material-outline-date-range"></i> @item.CreatedDate.ToString("dd MMM yyyy")</div>
									</div>
									<div class="item-description">
										<p>@item.Message</p>
									</div>
								</div>
							</div>
									<a href="#" @onclick:preventDefault @onclick="()=>SelectReview(item)"  class="button gray ripple-effect margin-top-5 margin-bottom-10"><i class="icon-feather-edit"></i> Ubah Review</a>
						</li>
						}
						}
					</ul>
				</div>
			</div>
		</div>


	</div>
	<!-- Row / End -->
	<!-- Footer -->
	<div class="dashboard-footer-spacer"></div>
	<SmallFooterPage></SmallFooterPage>
	<!-- Footer / End -->

</div>
@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	public List<Review> ListEmployer { get; set; } = new();
	public List<Review> ListFreelancer { get; set; } = new();

	[CascadingParameter]
	public AdminLayout Layout { get; set; }

	string Username;
	UserProfile selUser;
	public void Dispose()
	{
		AppState.OnReviewChange -= Refresh;


	}
	async void Refresh(string tousername)
	{
		await LoadData();
		await InvokeAsync(StateHasChanged);
	}
	private void PrepareForDeleteFreelancer(BookmarkedFreelancer item)
	{

		Layout.PrepareDeleteBookmarkedFreelancer(item);
	}
	async Task SelectReview(Review item)
	{
		Layout.SetReview(item);
		await IJS.InvokeVoidAsync("ShowModal", "review-small-dialog");

	}

	protected override async Task OnInitializedAsync()
	{


		var user = (await authenticationStateTask).User;

		if (user.Identity.IsAuthenticated)
		{
			Username = user.Identity.Name;
			selUser = UserSvc.GetItemByEmail(Username);
			await LoadData();
		}
		AppState.OnReviewChange += Refresh;
		
	}

	async Task LoadData()
	{
		ListEmployer = ReviewSvc.GetEmployerReview(selUser.Id);
		ListFreelancer = ReviewSvc.GetFreelancerReview(selUser.Id);
	}
	

	
}
