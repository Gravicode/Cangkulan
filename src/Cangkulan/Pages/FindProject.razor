@page "/find-project"
@using Microsoft.AspNetCore.WebUtilities;
@layout MainLayout
@inject IJSRuntime IJS

@inject NavigationManager NavMgr
@inject ToastInfoService Toast
@inject ProjectService ProjectSvc
@inject UserProfileService service
@inject CompanyService CompanySvc
@inject ProjectCategoryService CategorySvc
<!-- Spacer -->
<div class="margin-top-90"></div>
<!-- Spacer / End-->
<!-- Page Content
================================================== -->
<div class="container">
    <div class="row">
        <div class="col-xl-3 col-lg-4">
            <div class="sidebar-container">

                <!-- Location -->
                <div class="sidebar-widget">
                    <h3>Lokasi</h3>
                    <div class="input-with-icon">
                        <div id="autocomplete-container">
                            <input id="autocomplete-input" @bind="SelLocation" type="text" placeholder="Location">
                        </div>
                        <i class="icon-material-outline-location-on"></i>
                    </div>
                </div>

                <!-- Category -->
                <div class="sidebar-widget">
                    <h3>Kategori</h3>
                    <select @bind="SelCategory" title="All Categories">
                        <option value="All">All</option>
                        @foreach (var cat in ListCategory)
                        {
                            <option value="@cat.Category">@cat.Category</option>
                        }

                    </select>
                </div>

                <!-- Keywords -->
                <div class="sidebar-widget">
                    <h3>Kata Kunci</h3>
                    <div class="keywords-container">
                        <div class="keyword-input-container">
                            <input type="text" class="keyword-input" @bind="Keyword" placeholder="cth. website" />
                            <button @onclick:preventDefault @onclick="Search" class="keyword-input-button ripple-effect"><i class="icon-material-outline-search"></i></button>
                        </div>
                        <div style="display:none;" class="keywords-list"><!-- keywords go here --></div>
                        <div style="display:none;" class="clearfix"></div>
                    </div>
                </div>

                <!-- Budget -->
                <div class="sidebar-widget">
                    <h3>Range Nilai Proyek (0 untuk semua harga)</h3>
                    <div class="margin-top-55"></div>
                    <div class="input-with-icon">
                        <div id="autocomplete-container">
                            <input  @bind="NilaiProject" type="number" placeholder="0.0">
                        </div>
                        <i class="icon-material-outline-money"></i>
                    </div>
                    <!-- Range Slider -->
                    <input type="range" class="form-range" @bind="NilaiProject" min="0" max="99000000000" id="customRange1">
                </div>


                <!-- Tags -->
                <div class="sidebar-widget">
                    <h3>Skill</h3>

                    <div style="display:none;" class="tags-container">
                        <div class="tag">
                            <input type="checkbox" id="tag1" />
                            <label for="tag1">front-end dev</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag2" />
                            <label for="tag2">angular</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag3" />
                            <label for="tag3">react</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag4" />
                            <label for="tag4">vue js</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag5" />
                            <label for="tag5">web apps</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag6" />
                            <label for="tag6">design</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag7" />
                            <label for="tag7">wordpress</label>
                        </div>
                    </div>
                    <div class="clearfix"></div>

                    <!-- More Skills -->
                    <div class="keywords-container margin-top-20">
                        <div class="keyword-input-container">
                            <input type="text" @bind="NewSkill" class="keyword-input" placeholder="Daftar Skill" />
                            <button @onclick="AddSkill" class="keyword-input-button ripple-effect"><i class="icon-material-outline-add"></i></button>
                        </div>
                        <div class="keywords-list">
                            @if (SelSkills.Count > 0)
                            {
                                foreach (var skill in SelSkills)
                                {
                                    <span class="keyword">
                                        <span @onclick="()=>RemoveSkill(skill)" class="keyword-remove"></span>
                                        <span class="keyword-text">@skill</span>
                                    </span>
                                }
                            }
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="clearfix"></div>

            </div>
        </div>
        <div class="col-xl-9 col-lg-8 content-left-offset">

            <h3 class="page-title">Hasil Pencarian</h3>

            <div class="notify-box margin-top-15">
                <div class="switch-container">
                    <label class="switch"><input type="checkbox"><span class="switch-button"></span><span class="switch-text">Turn on email alerts for this search</span></label>
                </div>

                <div class="sort-by">
                    <span>Sort by:</span>
                    <select @bind="SortBy" style="width:fit-content" >
                        <option value="Relevance" selected>Relevance</option>
                        <option value="Newest">Newest</option>
                        <option value="Oldest">Oldest</option>

                    </select>
                </div>
            </div>

            <!-- Tasks Container -->
            <div class="tasks-list-container margin-top-35">
                <Virtualize Items="@ListProject" Context="item">
                    <a @key="item.Id" href="@($"/project-detail/{item.Id}")" class="task-listing">

                        <!-- Job Listing Details -->
                        <div class="task-listing-details">

                            <!-- Details -->
                            <div class="task-listing-description">
                                <h3 class="task-listing-title">@item.ProjectName</h3>
                                <ul class="task-icons">
                                    <li><i class="icon-material-outline-location-on"></i> @item.Location</li>
                                    <li><i class="icon-material-outline-access-time"></i> @DateHelper.GetElapsedTime(item.CreatedDate)</li>
                                </ul>
                                <p class="task-listing-text">@item.ProjectDesc</p>
                                <div class="task-tags">
                                    @foreach (var skill in item.Skills.Split(";"))
                                    {
                                        <span>@skill</span>
                                    }
                                </div>
                            </div>

                        </div>

                        <div class="task-listing-bid">
                            <div class="task-listing-bid-inner">
                                <div class="task-offers">
                                    <strong>@($"Rp{item.BudgetMin.ToString("n0")} - Rp{item.BudgetMax.ToString("n0")}")</strong>
                                    <span>@(item.ProjectPaymentType == ProjectPaymentTypes.Fix ? "Lumpsum" : "Bayar Per Jam")</span>
                                </div>
                                @if (item.WinnerId > 0)
                                {
                                    <div class="notification success">
                                        selesai
                                    </div>
                                }
                                else
                                {
                                    <span class="button button-sliding-icon ripple-effect">Penawaran <i class="icon-material-outline-arrow-right-alt"></i></span>
                                }
                            </div>
                        </div>
                    </a>
                </Virtualize>
                <!-- Task -->
                <!-- Pagination -->
                <div class="clearfix"></div>
                <div style="display:none;" class="row">
                    <div class="col-md-12">
                        <!-- Pagination -->
                        <div class="pagination-container margin-top-30 margin-bottom-60">
                            <nav class="pagination">
                                <ul>
                                    <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-left"></i></a></li>
                                    <li><a href="#" class="ripple-effect">1</a></li>
                                    <li><a href="#" class="current-page ripple-effect">2</a></li>
                                    <li><a href="#" class="ripple-effect">3</a></li>
                                    <li><a href="#" class="ripple-effect">4</a></li>
                                    <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-right"></i></a></li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
                <!-- Pagination / End -->

            </div>
            <!-- Tasks Container / End -->

        </div>
    </div>
</div>


@code {
    bool SearchEmailAlert;
    string Keyword, SelLocation, SelCategory, NewSkill, SortBy;
    double NilaiProject=0;

    List<string> SelSkills = new();
    List<Company> ListCompany = new();

    UserProfile SelUser = new UserProfile();
    string ErrorMsg = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    List<ProjectCategory> ListCategory = new List<ProjectCategory>();

    public List<Project> ListProject { get; set; }



    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = service.GetItemByUsername(UserName);
        }
        ListCategory = CategorySvc.GetAllData();
        ListCompany = CompanySvc.GetAllData();
        //check query string
        var uri = NavMgr.ToAbsoluteUri(NavMgr.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var resultKeyword))
        {
            if (!string.IsNullOrEmpty(resultKeyword))
            {
                Keyword = resultKeyword;
            }
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("l", out var resultLocation))
        {
            if (!string.IsNullOrEmpty(resultLocation))
            {
                SelLocation = resultLocation;
            }
        }
        Search();
    }

    void Search()
    {
        ListProject = ProjectSvc.FindByKeyword(Keyword, SelCategory, SelLocation, NilaiProject, SelSkills.ToArray(), SortBy);

    }

    async Task AddSkill()
    {
        if (string.IsNullOrEmpty(NewSkill)) return;
        SelSkills.Add(NewSkill);
        NewSkill = string.Empty;
    }

    async Task RemoveSkill(string Name)
    {
        SelSkills.Remove(Name);
    }


    async Task Open(string url)
    {
        if (!string.IsNullOrEmpty(url))
            await IJS.InvokeVoidAsync("OpenUrl", url);
    }

    

}
