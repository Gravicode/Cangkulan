@page "/find-job-map"
@layout ContentLayout
@inject IJSRuntime IJS
@using System.Globalization
@inject NavigationManager NavMgr
@inject ToastInfoService Toast
@inject JobService JobSvc
@inject UserProfileService service
@inject CompanyService CompanySvc
@inject JobCategoryService CategorySvc
@inject BookmarkedJobService BookmarkedJobSvc
<div class="full-page-container with-map">

    <div class="full-page-sidebar hidden-sidebar">
        <div class="full-page-sidebar-inner" data-simplebar>

            <div class="sidebar-container">
                <!-- Keywords -->
                <div class="sidebar-widget">
                    <h3>Kata Kunci</h3>
                    <div class="keywords-container">
                        <div class="keyword-input-container">
                            <input type="text" @bind="Keyword" class="keyword-input" placeholder="cth. developer" />
                            <button style="display:none;" class="keyword-input-button ripple-effect"><i class="icon-material-outline-add"></i></button>
                        </div>
                        <div style="display:none;" class="keywords-list"><!-- keywords go here --></div>
                        <div class="clearfix"></div>
                    </div>
                </div>

                <!-- Category -->
                <div class="sidebar-widget">
                    <h3>Category</h3>
                    <select @bind="SelCategory" title="All Categories">
                        <option value="All">All</option>
                        @foreach (var cat in ListCategory)
                        {
                            <option value="@cat.Category">@cat.Category</option>
                        }
                    </select>
                </div>

                <!-- Job Types -->
                <div class="sidebar-widget">
                    <h3>Job Type</h3>

                    <div class="switches-list">
                        <div class="switch-container">
                            <label class="switch"><input type="checkbox" @bind="JobFreelance"><span class="switch-button"></span> Freelance</label>
                        </div>

                        <div class="switch-container">
                            <label class="switch"><input type="checkbox" @bind="JobFullTime"><span class="switch-button"></span> Full Time</label>
                        </div>

                        <div class="switch-container">
                            <label class="switch"><input type="checkbox" @bind="JobPartTime"><span class="switch-button"></span> Part Time</label>
                        </div>

                        <div class="switch-container">
                            <label class="switch"><input type="checkbox" @bind="JobInternship"><span class="switch-button"></span> Internship</label>
                        </div>
                        <div class="switch-container">
                            <label class="switch"><input type="checkbox" @bind="JobTemporary"><span class="switch-button"></span> Temporary</label>
                        </div>
                    </div>

                </div>

                <!-- Salary -->
                <div class="sidebar-widget">
                    <h3>Gaji (0 untuk semua)</h3>
                    <div class="margin-top-55"></div>
                    <div class="input-with-icon">
                        <div id="autocomplete-container">
                            <input @bind="Gaji" type="number" placeholder="0.0">
                        </div>
                        <i class="icon-material-outline-money"></i>
                    </div>
                    <!-- Range Slider -->
                    <input type="range" class="form-range" @bind="Gaji" min="0" max="99000000000" id="customRange1">
                </div>

                <!-- Tags -->
                <div class="sidebar-widget">
                    <h3>Tags</h3>
                    <div class="margin-top-55"></div>
                    <div class="keyword-input-container">
                        <input type="text" @bind="NewTag" class="keyword-input" placeholder="Daftar Tag" />
                        <button @onclick="AddTag" class="keyword-input-button ripple-effect"><i class="icon-material-outline-add"></i></button>
                    </div>
                    <div class="keywords-list">
                        @if (SelTags.Count > 0)
                        {
                            foreach (var Tag in SelTags)
                            {
                                <span class="keyword">
                                    <span @onclick="()=>RemoveTag(Tag)" class="keyword-remove"></span>
                                    <span class="keyword-text">@Tag</span>
                                </span>
                            }
                        }
                    </div>
                    <div style="display:none;" class="tags-container">
                        <div class="tag">
                            <input type="checkbox" id="tag1" />
                            <label for="tag1">front-end dev</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag2" />
                            <label for="tag2">angular</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag3" />
                            <label for="tag3">react</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag4" />
                            <label for="tag4">vue js</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag5" />
                            <label for="tag5">web apps</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag6" />
                            <label for="tag6">design</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag7" />
                            <label for="tag7">wordpress</label>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>

            </div>
            <!-- Sidebar Container / End -->
            <!-- Search Button -->
            <div class="sidebar-search-button-container">
                <button @onclick="Search" class="button ripple-effect">Cari</button>
            </div>
            <!-- Search Button / End-->

        </div>
    </div>
    <!-- Full Page Sidebar / End -->
    <!-- Full Page Content -->
    <div class="full-page-content-container" data-simplebar>
        <div class="full-page-content-inner">

            <h3 class="page-title">Hasil Pencarian</h3>

            <div class="notify-box margin-top-15">
                <div class="switch-container">
                    <label class="switch"><input @bind="SearchEmailAlert" type="checkbox"><span class="switch-button"></span><span class="switch-text">Email alert untuk Pencarian</span></label>
                </div>

                <div class="sort-by">
                    <span>Sort by:</span>
                    <select @bind="SortBy" style="width:fit-content">
                        <option>Relevance</option>
                        <option>Newest</option>
                        <option>Oldest</option>

                    </select>
                </div>
            </div>

            <div class="listings-container grid-layout margin-top-35">
                <Virtualize Items="@ListJob" Context="item">
                    <!-- Job Listing -->
                    <a @key="item.Id" href="@($"/job-detail/{item.Id}")" class="job-listing">

                        <!-- Job Listing Details -->
                        <div class="job-listing-details">
                            <!-- Logo -->
                            <div class="job-listing-company-logo">
                                <img src="@(string.IsNullOrEmpty(item.Company.LogoUrl)? "images/company-logo-01.png":item.Company.LogoUrl)" alt="">
                            </div>

                            <!-- Details -->
                            <div class="job-listing-description">
                                <h4 class="job-listing-company">
                                    @item.Company.FullName
                                    @if (item.Company.IsVerified)
                                    {
                                        <span class="verified-badge" title="Verified Employer" data-tippy-placement="top"></span>
                                    }
                                </h4>
                                <h3 class="job-listing-title">@item.JobTitle</h3>
                            </div>
                        </div>

                        <!-- Job Listing Footer -->
                        <div class="job-listing-footer">
                            <span @onclick:preventDefault @onclick:stopPropagation @onclick="()=>ToggleBookmark(item)" class="bookmark-icon @((Bookmarked.ContainsKey(item.Id) && Bookmarked[item.Id])?"bookmarked":"")"></span>
                            <ul>
                                <li><i class="icon-material-outline-location-on"></i> @item.Location</li>
                                <li><i class="icon-material-outline-business-center"></i> @item.JobType</li>
                                <li><i class="icon-material-outline-account-balance-wallet"></i> @($"Rp{NumberHelper.FormatNumber(item.SalaryMin)}-Rp{NumberHelper.FormatNumber(item.SalaryMax)}")</li>
                                <li><i class="icon-material-outline-access-time"></i> @DateHelper.GetElapsedTime(item.CreatedDate)</li>
                            </ul>
                        </div>
                    </a>
                </Virtualize>


            </div>

            <!-- Pagination -->
            <div class="clearfix"></div>
            <div style="display:none;" class="pagination-container margin-top-20 margin-bottom-20">
                <nav class="pagination">
                    <ul>
                        <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-left"></i></a></li>
                        <li><a href="#" class="ripple-effect">1</a></li>
                        <li><a href="#" class="ripple-effect current-page">2</a></li>
                        <li><a href="#" class="ripple-effect">3</a></li>
                        <li><a href="#" class="ripple-effect">4</a></li>
                        <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-right"></i></a></li>
                    </ul>
                </nav>
            </div>
            <div class="clearfix"></div>
            <!-- Pagination / End -->
            <!-- Footer -->
            <SmallFooterPage></SmallFooterPage>
            <!-- Footer / End -->

        </div>
    </div>
    <!-- Full Page Content / End -->
    <!-- Full Page Map -->
    <div class="full-page-map-container">

        <!-- Enable Filters Button -->
        <div class="filter-button-container">
            <button class="enable-filters-button">
                <i class="enable-filters-button-icon"></i>
                <span class="show-text">Lihat Filter</span>
                <span class="hide-text">Tutup Filter</span>
            </button>
            <div class="filter-button-tooltip">Klik untuk membuka filter pencarian!</div>
        </div>

        <!-- Map -->
        <div id="map" data-map-zoom="12" data-map-scroll="true"></div>
    </div>
    <!-- Full Page Map / End -->

</div>
@code {
    List<MapItem> MapItems;
    bool SearchEmailAlert;
    string Keyword, SelLocation, SelCategory, NewTag, SortBy;
    double Gaji = 0;

    List<string> SelTags = new();
    List<Company> ListCompany = new();

    UserProfile SelUser = new UserProfile();
    string ErrorMsg = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    Dictionary<long, bool> Bookmarked = new();
    List<JobCategory> ListCategory = new List<JobCategory>();

    public List<Job> ListJob { get; set; }
    public List<string> JobSelected { get; set; } = new();
    bool JobFreelance;
    bool JobFullTime;
    bool JobPartTime;
    bool JobInternship;
    bool JobTemporary;


    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = service.GetItemByUsername(UserName);

        }
        if (MapItems == null) MapItems = new();
        ListCategory = CategorySvc.GetAllData();
        ListCompany = CompanySvc.GetAllData();
        Search();
    }
    CultureInfo ci = new CultureInfo("EN-us");
    async void Search()
    {


        JobSelected.Clear();
        if (JobFreelance) JobSelected.Add(JobTypes.Freelance);
        if (JobFullTime) JobSelected.Add(JobTypes.FullTime);
        if (JobPartTime) JobSelected.Add(JobTypes.PartTime);
        if (JobInternship) JobSelected.Add(JobTypes.Internship);
        if (JobTemporary) JobSelected.Add(JobTypes.Temporary);

        ListJob = JobSvc.FindByKeyword(Keyword, SelCategory, SelLocation, Gaji, JobSelected.ToArray(), SelTags.ToArray(), SortBy);
        Bookmarked.Clear();
        if (!string.IsNullOrEmpty(UserName))
            foreach (var item in ListJob)
            {
                Bookmarked.Add(item.Id, SelUser.BookmarkedJobs.Any(x => x.JobId == item.Id));
            }

        MapItems.Clear();
        if (ListJob != null && ListJob.Count > 0)
        {

            var idx = 0;
            foreach (var item in ListJob)
            {
                if (!string.IsNullOrEmpty(item.Latitude) && !string.IsNullOrEmpty(item.Longitude))
                    MapItems.Add(new MapItem() { Company = item.Company.FullName, Icon = "", Index = idx++, Jobtitle = item.JobTitle, Lat = float.Parse(item.Latitude, ci), Lon = float.Parse(item.Longitude, ci), Logourl = item.Company.LogoUrl, Pageurl = "find-job-map", Verified = item.Company.IsVerified ? "verified" : "not-verified" });
            }

        }
    }
    async Task ToggleBookmark(Job item)
    {
        if (string.IsNullOrEmpty(UserName))
        {
            await Toast.ShowInfo("Silakan login terlebih dahulu untuk bookmark.");
            return;
        }
        var State = Bookmarked[item.Id];
        State = !State;
        var res = false;
        if (State)
        {
            res = BookmarkedJobSvc.Bookmark(SelUser.Id, item.Id);
        }
        else
        {
            res = BookmarkedJobSvc.UnBookmark(SelUser.Id, item.Id);
        }
        if (res) await Toast.ShowInfo(State ? "bookmarked" : "unbookmarked");
        Bookmarked[item.Id] = State;
    }
    async Task AddTag()
    {
        if (string.IsNullOrEmpty(NewTag)) return;
        SelTags.Add(NewTag);
        NewTag = string.Empty;
    }

    async Task RemoveTag(string Name)
    {
        SelTags.Remove(Name);
    }


    async Task Open(string url)
    {
        if (!string.IsNullOrEmpty(url))
            await IJS.InvokeVoidAsync("OpenUrl", url);
    }
    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            //IJS.InvokeVoidAsync("LoadMap");
        }
        if (MapItems.Count > 0)
            IJS.InvokeVoidAsync("LoadMaps", MapItems);
    }
}
