@page "/find-freelance"
@layout ContentLayout
@inject IJSRuntime IJS
@inject NavigationManager NavMgr
@inject ToastInfoService Toast
@inject ProjectService ProjectSvc
@inject UserProfileService service
@inject UserProfileService UserSvc
@inject ProjectCategoryService CategorySvc
@inject BookmarkedFreelancerService BookmarkedFreelancerSvc
<!-- Titlebar
<!-- Page Content
================================================== -->
<div class="full-page-container">

    <div class="full-page-sidebar">
        <div class="full-page-sidebar-inner" data-simplebar>
            <div class="sidebar-container">

                <!-- Location -->
                <div class="sidebar-widget">
                    <h3>Location</h3>
                    <div class="input-with-icon">
                        <div id="autocomplete-container">
                            <input id="autocomplete-input" @bind="SelLocation" type="text" placeholder="Location">
                        </div>
                        <i class="icon-material-outline-location-on"></i>
                    </div>
                </div>

                <!-- Category -->
                <div class="sidebar-widget">
                    <h3>Kategori</h3>
                    <select @bind="SelCategory" title="All Categories">
                        <option value="All">All</option>
                        @foreach (var cat in ListCategory)
                        {
                            <option value="@cat.Category">@cat.Category</option>
                        }

                    </select>
                </div>

                <!-- Keywords -->
                <div class="sidebar-widget">
                    <h3>Kata Kunci</h3>
                    <div class="keywords-container">
                        <div class="keyword-input-container">
                            <input type="text" class="keyword-input" @bind="Keyword" placeholder="cth. website" />
                            <button @onclick:preventDefault @onclick="Search" class="keyword-input-button ripple-effect"><i class="icon-material-outline-search"></i></button>
                        </div>
                        <div style="display:none;" class="keywords-list"><!-- keywords go here --></div>
                        <div style="display:none;" class="clearfix"></div>
                    </div>
                </div>

                <!-- Budget -->
                <div class="sidebar-widget">
                    <h3>Bayaran per Jam (0 untuk semua)</h3>
                    <div class="margin-top-55"></div>
                    <div class="input-with-icon">
                        <div id="autocomplete-container">
                            <input @bind="RatePerJam" type="number" placeholder="0.0">
                        </div>
                        <i class="icon-material-outline-money"></i>
                    </div>
                    <!-- Range Slider -->
                    <input type="range" class="form-range" @bind="RatePerJam" min="0" max="100000000" id="customRange1">
                </div>

                <!-- Tags -->
                <div class="sidebar-widget">
                    <h3>Skills</h3>

                    <div style="display:none;" class="tags-container">
                        <div class="tag">
                            <input type="checkbox" id="tag1" />
                            <label for="tag1">front-end dev</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag2" />
                            <label for="tag2">angular</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag3" />
                            <label for="tag3">react</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag4" />
                            <label for="tag4">vue js</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag5" />
                            <label for="tag5">web apps</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag6" />
                            <label for="tag6">design</label>
                        </div>
                        <div class="tag">
                            <input type="checkbox" id="tag7" />
                            <label for="tag7">wordpress</label>
                        </div>
                    </div>
                    <div class="clearfix"></div>

                    <!-- More Skills -->
                    <div class="keywords-container margin-top-20">
                        <div class="keyword-input-container">
                            <input type="text" @bind="NewSkill" class="keyword-input" placeholder="Daftar Skill" />
                            <button @onclick="AddSkill" class="keyword-input-button ripple-effect"><i class="icon-material-outline-add"></i></button>
                        </div>
                        <div class="keywords-list">
                            @if (SelSkills.Count > 0)
                            {
                                foreach (var skill in SelSkills)
                                {
                                    <span class="keyword">
                                        <span @onclick="()=>RemoveSkill(skill)" class="keyword-remove"></span>
                                        <span class="keyword-text">@skill</span>
                                    </span>
                                }
                            }
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
                <div class="clearfix"></div>

                <div class="margin-bottom-40"></div>

            </div>
            <!-- Sidebar Container / End -->
            <!-- Search Button -->
            <div class="sidebar-search-button-container">
                <button @onclick="Search" class="button ripple-effect">Search</button>
            </div>
            <!-- Search Button / End-->

        </div>
    </div>
    <!-- Full Page Sidebar / End -->
    <!-- Full Page Content -->
    <div class="full-page-content-container" data-simplebar>
        <div class="full-page-content-inner">

            <h3 class="page-title">Hasil Pencarian</h3>

            <div class="notify-box margin-top-15">
                <div class="switch-container">
                    <label class="switch"><input type="checkbox" @bind="SearchEmailAlert"><span class="switch-button"></span><span class="switch-text">Turn on email alerts for this search</span></label>
                </div>
                <div class="sort-by">
                    <span>Sort by:</span>
                    <select @bind="SortBy" style="width:fit-content">
                        <option value="Relevance" selected>Relevance</option>
                        <option value="Newest">Newest</option>
                        <option value="Oldest">Oldest</option>

                    </select>
                </div>

            </div>

            <!-- Freelancers List Container -->
            <div class="freelancers-container freelancers-grid-layout margin-top-35">
                <Virtualize Items="@ListUsers" Context="item">
                    <!--Freelancer -->
                    <div @key="item.Id" class="freelancer">

                        <!-- Overview -->
                        <div class="freelancer-overview">
                            <div class="freelancer-overview-inner">

                                <!-- Bookmark Icon -->
                                <span @onclick:preventDefault @onclick:stopPropagation @onclick="()=>ToggleBookmark(item)" class="bookmark-icon @((Bookmarked.ContainsKey(item.Id) && Bookmarked[item.Id])?"bookmarked":"")"></span>

                                <!-- Avatar -->
                                <div class="freelancer-avatar">
                                    @if (item.Verified)
                                    {
                                        <div class="verified-badge"></div>
                                    }
                                    <a href="@($"/freelance-detail/{item.Id}")"><img src="@(string.IsNullOrEmpty(item.PicUrl)?"images/user-avatar-placeholder.png":item.PicUrl)" alt=""></a>
                                </div>

                                <!-- Name -->
                                <div class="freelancer-name">
                                    <h4><a href="@($"/freelance-detail/{item.Id}")">@item.FullName <img class="flag" src="@(string.IsNullOrEmpty(item.Nationality)? "images/flags/id.svg" : $"images/flags/{item.Nationality}.svg" )" alt="" title="@item.Nationality" data-tippy-placement="top"></a></h4>
                                    <span>@item.TagLine</span>
                                </div>

                                <!-- Rating -->
                                <div class="freelancer-rating">
                                    <RatingPicker Rating="@item.Rating" IsEditable="false"></RatingPicker>
                                </div>
                            </div>
                        </div>

                        <!-- Details -->
                        <div class="freelancer-details">
                            <div class="freelancer-details-list">
                                <ul>
                                    <li>Location <strong><i class="icon-material-outline-location-on"></i> @item.Alamat</strong></li>
                                    <li>Rate <strong>Rp @item.RatePerHour?.ToString("n0") / jam</strong></li>
                                    <li>Job Success <strong>@item.JobSuccessPercent %</strong></li>
                                </ul>
                            </div>
                            <a href="@($"/freelance-detail/{item.Id}")" class="button button-sliding-icon ripple-effect">Lihat Profil <i class="icon-material-outline-arrow-right-alt"></i></a>
                        </div>
                    </div>
                    <!-- Freelancer / End -->
                </Virtualize>
              

            </div>
            <!-- Freelancers Container / End -->
            <!-- Pagination -->
            <div class="clearfix"></div>
            <div style="display:none;" class="pagination-container margin-top-20 margin-bottom-20">
                <nav class="pagination">
                    <ul>
                        <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-left"></i></a></li>
                        <li><a href="#" class="ripple-effect">1</a></li>
                        <li><a href="#" class="ripple-effect current-page">2</a></li>
                        <li><a href="#" class="ripple-effect">3</a></li>
                        <li><a href="#" class="ripple-effect">4</a></li>
                        <li class="pagination-arrow"><a href="#" class="ripple-effect"><i class="icon-material-outline-keyboard-arrow-right"></i></a></li>
                    </ul>
                </nav>
            </div>
            <div class="clearfix"></div>
            <!-- Pagination / End -->
            <!-- Footer -->
            <SmallFooterPage></SmallFooterPage>
            <!-- Footer / End -->

        </div>
    </div>
    <!-- Full Page Content / End -->

</div>

@code {
    bool SearchEmailAlert;
    string Keyword, SelLocation, SelCategory, NewSkill, SortBy;
    double RatePerJam = 0;

    List<string> SelSkills = new();
    List<Company> ListCompany = new();
    Dictionary<long, bool> Bookmarked = new();
    UserProfile SelUser = new UserProfile();
    string ErrorMsg = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    List<ProjectCategory> ListCategory = new List<ProjectCategory>();

    public List<UserProfile> ListUsers { get; set; }



    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = service.GetItemByUsername(UserName);
        }
        ListCategory = CategorySvc.GetAllData();
        Search();
    }
    async Task ToggleBookmark(UserProfile item)
    {
        if (string.IsNullOrEmpty(UserName))
        {
            await Toast.ShowInfo("Silakan login terlebih dahulu untuk bookmark.");
            return;
        }
        var State = Bookmarked[item.Id];
        State = !State;
        var res = false;
        if (State)
        {
            res = BookmarkedFreelancerSvc.Bookmark(SelUser.Id, item.Id);
        }
        else
        {
            res = BookmarkedFreelancerSvc.UnBookmark(SelUser.Id, item.Id);
        }
        if (res) await Toast.ShowInfo(State ? "bookmarked" : "unbookmarked");
        Bookmarked[item.Id] = State;
    }
    void Search()
    {
        ListUsers = UserSvc.FindByKeyword(Keyword, SelCategory, SelLocation, RatePerJam, SelSkills.ToArray(), SortBy);
        Bookmarked.Clear();
        if (!string.IsNullOrEmpty(UserName))
            foreach (var item in ListUsers)
            {
                Bookmarked.Add(item.Id, SelUser.BookmarkedJobs.Any(x => x.JobId == item.Id));
            }
    }

    async Task AddSkill()
    {
        if (string.IsNullOrEmpty(NewSkill)) return;
        SelSkills.Add(NewSkill);
        NewSkill = string.Empty;
    }

    async Task RemoveSkill(string Name)
    {
        SelSkills.Remove(Name);
    }


    async Task Open(string url)
    {
        if (!string.IsNullOrEmpty(url))
            await IJS.InvokeVoidAsync("OpenUrl", url);
    }


}
